<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具::代码实现 on 狗蛋日</title>
    <link>http://young-mann.top/categories/%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</link>
    <description>Recent content in 工具::代码实现 on 狗蛋日</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© 2011-2020 Fabian Tamp</copyright>
    <lastBuildDate>Thu, 20 Oct 2022 21:50:02 +0800</lastBuildDate><atom:link href="http://young-mann.top/categories/%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>蒙特卡罗估计简介</title>
      <link>http://young-mann.top/posts/mc/</link>
      <pubDate>Thu, 20 Oct 2022 21:50:02 +0800</pubDate>
      
      <guid>http://young-mann.top/posts/mc/</guid>
      <description>本文是对《金融工程中的蒙特卡罗方法》一书的读书笔记。
蒙特卡洛原理 蒙特卡洛方法是什么？ 蒙特卡罗方法是一种用于模拟随机现象，以求得事件的概率的统计模拟方法。借助测度论的语言，我们可对概率论做一种公理化定义1，将随机试验中随机发生的事件与一个集合对应起来（这个集合包含了事件发生时的所有可能结果），将总体也与一个集合对应起来（这个集合包含了随机试验的所有可能结果），从而将概率定义为：
$$某事件的概率 := \frac{该事件对应集合的容量}{总体对应集合的容量}$$
确定了这个定义之后，我们便可以通过计算事件对应集合的容量与总体对应集合的容值，计算某个事件的概率——而实际上蒙特卡罗方法就是这么做的。比如，我们现在想要计算某个事件发生的概率。那么，我们可以做的是，在所有可能结果组成的总体中随机抽样，然后计算落入事件对应集合的样本点所占总体的比例，以此比例「估计」事件对应集合的容量。在这一过程中，大数定律保证了这个估计会随着抽样的增加而收敛于真实值2，中心极限定理则给出了在有限次抽样下估计误差的可能幅度。
为了更方便地计算集合的度量，我们可以引入积分这个工具。考虑一个简单的例子：假设我们现在需要估计一个给定函数$f$在单位区间上的积分值。为书写方便起见，我们可以将这个积分值记作 $\alpha$，则有： $$ \alpha = \int^1_0f(x) \mathop{}!\mathrm{d}x. $$ $\alpha$ 可以被看作期望值 $\mathbb{E}[f(U)]$，其中 $U \sim\text{Uniform}(0,1)$。假设我们可以在 $[0,1]$ 上独立均匀地抽样得到 $U_1,U_2,\cdots$，那么计算 $f$ 在这些样本点上的取值并求平均，便可得到欲求积分值的一个蒙特卡洛估计： $$ \hat \alpha n = \frac1n \sum^n{i=1}f(U_i). $$ 如果函数 $f$ 满足一些特定性质，我们就能得到一个误差较低的 $\alpha$ 估计值，并且可以显式地求出这个估计的误差值。
先来看看 $\alpha$ 的具体估计取值。如果函数 $f$ 在 $[0,1]$ 上可积，那么根据强大数定律，有： $$ 当\ n \to \infty \ 时,\ \hat \alpha_n \stackrel{a.s.} \longrightarrow \alpha. $$ 再来看看估计的误差值。如果函数 $f$ 平方可积，那么蒙特卡洛估计中的误差项 $\hat \alpha_n - \alpha$ 近似服从于 $\text{Normal}(0, {\sigma_f^2}/{ n})$，而且 $n$ 越大，这个误差项就越近似于上述的正态分布。需要补充的是，这个正态分布中的总体方差 $\sigma_f$ 定义如下： $$ \sigma_f^2 = \int^1_0 (f(x)-\alpha)^2 \mathop{}!</description>
    </item>
    
    <item>
      <title>C&#43;&#43; design patterns and derivatives pricing</title>
      <link>http://young-mann.top/posts/design-patterns-and-derivatives-pricing/</link>
      <pubDate>Tue, 09 Aug 2022 00:42:05 +0800</pubDate>
      
      <guid>http://young-mann.top/posts/design-patterns-and-derivatives-pricing/</guid>
      <description>Book Link: C++ Design Patterns and Derivatives Pricing
本文用于记录读完 C++ design patterns and derivatives pricing 后的代码实践。
ch1-VanillaCallOption 在第 1 章的文件夹里，主要实现了 1 个简单的看涨期权（call option）的定价模型，由 3 部分组成。主程序是 SimpleMCMain1.cpp ，其中需要用到生成随机数的功能，所以引入了 1 个头文件（只有函数声明）的 Random1.h ，以及具体实现该功能的头文件 Random1_Implementation.h 1。
ch2-Encapsulation 在第 2 章，对于常用的功能进行了封装。这章用到的文件具体如下（表格内省略了用于实现接口的文件，例如 “Random1_Implementation.h”，后文的表格皆是如此）：
文件名称 用途 Random1.h 生成随机数的函数 PayOff1.h 以 Strike 与 TheOptionsType 为私有变量的 PayOff 类，主要特点由：1. 以 enum OptionType {call, put} 区分不同类型期权的定价方式（这里是 2 种：看涨期权、看跌期权）；2. 通过double operator() (double Spot) const 重载运算符 () ，以计算给定期权的 PayOff SimpleMC.h 用于最终定价的 Monte-Carlo 函数 SimpleMCMain2.</description>
    </item>
    
  </channel>
</rss>
